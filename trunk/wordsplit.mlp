(***********************************************************************)
(*                                                                     *)
(*                 SpamOracle -- a Bayesian spam filter                *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 2002 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  This file is distributed under the terms of the   *)
(*  GNU Public License version 2.                                      *)
(*                                                                     *)
(***********************************************************************)

(* $Id$ *)

(* Decompose a string into words. *)

{
(* Map uppercase to lowercase.  Remove ISO Latin 1 accents. *)

let tbl = "\
\000\001\002\003\004\005\006\007\008\t\n\011\012\013\014\015\
\016\017\018\019\020\021\022\023\024\025\026\027\028\029\030\031 \
!\"#$%&'()*+,-./\
0123456789:;<=>?\
@abcdefghijklmno\
pqrstuvwxyz[\\]^_\
`abcdefghijklmno\
pqrstuvwxyz{|}~\127\
\128\129\130\131\132\133\134\135\136\137\138\139\140\141\142\143\
\144\145\146\147\148\149\150\151\152\153\154\155\156\157\158\159\
\160¡¢£¤¥¦§¨©ª«¬­®¯\
°±²³´µ¶·¸¹º»¼½¾¿\
aaaaaaeceeeeiiii\
Ðnooooo×ouuuuypß\
aaaaaaeceeeeiiii\
ðnooooo÷ouuuuypy"

let normalize s =
  for i = 0 to String.length s - 1 do
    s.[i] <- tbl.[Char.code s.[i]]
  done

}


let word_constituent = [
   'a'-'z' 'A'-'Z' '0'-'9' '-' '\'' '$' '%'
#ifdef FRENCH
   '\164' (* Euro *)
   'À' 'Â' 'Ç' 'È' 'É' 'Ê' 'Ë' 'Î' 'Ï' 'Ô' 'Ù' 'Û' 'Ü'
   'à' 'â' 'ç' 'è' 'é' 'ê' 'ë' 'î' 'ï' 'ô' 'ù' 'û' 'ü' 'ÿ'
#endif
#ifdef SPANISH
   '\164' (* Euro *)
   'Á' 'É' 'Í' 'Ó' 'Ú' 'Ü' 'Ñ' 'á' 'é' 'í' 'ó' 'ú' 'ü' 'ñ'
#endif
#ifdef ITALIAN
   '\164' (* Euro *)
   'É' 'Í' 'Ú' 'À' 'È' 'Ò' 'é' 'í' 'ú' 'à' 'è' 'ò'
#endif
#ifdef GERMAN
   '\164' (* Euro *)
   'Ä' 'Ö' 'Ü' 'ä' 'ö' 'ü' 'ß' 
#endif
]  

let uppercase_letter =
  ['A'-'Z']

let weird_character =
  ['\127' - '\255']

rule split = parse
    uppercase_letter uppercase_letter uppercase_letter uppercase_letter *
      { fun action ->
          let s = Lexing.lexeme lexbuf in
          action ("U" ^ string_of_int (String.length s));
          if String.length s <= 12 then (normalize s; action s);
          split lexbuf action }
  | word_constituent word_constituent word_constituent word_constituent *
      { fun action ->
          let s = Lexing.lexeme lexbuf in
          if String.length s <= 12 then (normalize s; action s);
          split lexbuf action }
  | weird_character weird_character weird_character weird_character *
      { fun action ->
          let s = Lexing.lexeme lexbuf in
          action ("W" ^ string_of_int (String.length s));
          split lexbuf action }
  | eof
      { fun action -> () }
  | _
      { split lexbuf }

{

let iter action txt =
  split (Lexing.from_string txt) action

}
